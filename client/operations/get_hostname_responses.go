// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "hello-swagger-api/models"
)

// GetHostnameReader is a Reader for the GetHostname structure.
type GetHostnameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHostnameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHostnameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetHostnameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetHostnameOK creates a GetHostnameOK with default headers values
func NewGetHostnameOK() *GetHostnameOK {
	return &GetHostnameOK{}
}

/*GetHostnameOK handles this case with default header values.

returns the hostname of the machine
*/
type GetHostnameOK struct {
	Payload string
}

func (o *GetHostnameOK) Error() string {
	return fmt.Sprintf("[GET /hostname][%d] getHostnameOK  %+v", 200, o.Payload)
}

func (o *GetHostnameOK) GetPayload() string {
	return o.Payload
}

func (o *GetHostnameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostnameDefault creates a GetHostnameDefault with default headers values
func NewGetHostnameDefault(code int) *GetHostnameDefault {
	return &GetHostnameDefault{
		_statusCode: code,
	}
}

/*GetHostnameDefault handles this case with default header values.

error
*/
type GetHostnameDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get hostname default response
func (o *GetHostnameDefault) Code() int {
	return o._statusCode
}

func (o *GetHostnameDefault) Error() string {
	return fmt.Sprintf("[GET /hostname][%d] getHostname default  %+v", o._statusCode, o.Payload)
}

func (o *GetHostnameDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHostnameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
